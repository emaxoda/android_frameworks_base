xqq/*
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.internal.gmscompat;

import android.app.Application;
import android.app.ActivityManager;
import android.content.Context;
import android.os.Build;
import android.os.SystemProperties;
import android.provider.Settings;
import android.system.ErrnoException;
import android.util.Log;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.List;

/** @hide */
public final class AttestationHooks {
    private static final String TAG = "GmsCompat/Attestation";
    private static final String PACKAGE_GMS = "com.google.android.gms";
    private static final String FAKE_FINGERPRINT = "google/raven/raven:12/SP2A.220505.002/8353555:user/release-keys";

    private static volatile boolean sIsGms = false;

    private AttestationHooks() { }

    private static void setBuildField(String key, Object value) {
        try {
            // Unlock
            Field field = Build.class.getDeclaredField(key);
            field.setAccessible(true);

            // Edit
            field.set(null, value);

            // Lock
            field.setAccessible(false);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            Log.e(TAG, "Failed to spoof Build." + key, e);
        }
    }

    private static void spoofBuildGms() {
        // Alter model name to avoid hardware attestation enforcement
        setBuildField("MODEL", Build.MODEL + " ");
        setBuildField("FINGERPRINT", FAKE_FINGERPRINT);
        setBuildField("TAGS", "release-keys");
        setBuildField("TYPE", "user");
        setBuildField("IS_DEBUGGABLE", false);
        setBuildField("BRAND", "google");
        setBuildField("MANUFACTURER", "google");
        setBuildField("DEVICE", "raven");
        setBuildField("PRODUCT", "raven");

        StringBuilder sb = new StringBuilder();
        sb.append("ro.product.model=" + Build.MODEL + ";");
        sb.append("ro.build.fingerprint=" + Build.FINGERPRINT + ";");
        sb.append("ro.build.tags=" + Build.TAGS + ";");
        sb.append("ro.build.type=" + Build.TYPE + ";");
        sb.append("ro.debuggable=0;");
        sb.append("ro.product.brand=" + Build.BRAND + ";");
        sb.append("ro.product.manufacturer=" + Build.MANUFACTURER + ";");
        sb.append("ro.product.device=" + Build.DEVICE + ";");
        sb.append("ro.product.name=" + Build.PRODUCT + ";");
        sb.append("service.adb.root=0;");
        sb.append("ro.vendor.build.security_patch=" + Build.VERSION.SECURITY_PATCH);

        try {
            android.system.Os.setenv("SPOOF_PIXEL_PROPS", sb.toString(), true);
        } catch (ErrnoException ex) {
            Log.e("Unable to initialize $SPOOF_PIXEL_PROPS");
        }
    }

    public static void initApplicationBeforeOnCreate(Context context, Application app) {
        if (ActivityManager.getService() == null) return;
        String packages = Settings.Secure.getString(context.getContentResolver(),
            Settings.Secure.SPOOF_PIXEL_PROPS);
        if (packages == null) packages = PACKAGE_GMS;
        if (List.of(packages.split(";")).contains(app.getPackageName())) {
            sIsGms = true;
            spoofBuildGms();
        }
    }

    private static boolean isCallerSafetyNet() {
        return Arrays.stream(Thread.currentThread().getStackTrace())
                .anyMatch(elem -> elem.getClassName().contains("DroidGuard"));
    }

    public static void onEngineGetCertificateChain() {
        // Check stack for SafetyNet
        if (sIsGms && isCallerSafetyNet()) {
            throw new UnsupportedOperationException();
        }
    }
}
